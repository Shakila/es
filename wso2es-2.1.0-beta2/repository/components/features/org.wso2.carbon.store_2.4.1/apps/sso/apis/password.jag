<%
/*
 *  Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

/**
 *  Contains endpoints related to password
 */

var action = request.getParameter('action'),
    username = session.get('username'),
    password = request.getParameter('password'),
    confirmationCode = session.get('confirmation'),
    responseProcessor = require('utils').response,
    constants = require('rxt').constants,
    log = new Log(),
    res = {};

var errorProcessor = require('/modules/error.js');

(function () {
    var recoveryModule = require('account-management').recovery;

    /**
     * Update the password
     *
     * @param username user name
     * @param confirmation confirmation code from previous step
     * @param password new password
     * @return success status
     */
    var updatePassword = function (username, confirmation, password) {
        if (!username || !confirmation || !password) {
            res.error = true;
            res.msg = 'Password updating failed. Username, confirmation or password is empty';
            if (log.isDebugEnabled()) {
                log.debug(res.msg + ' user:' + username + ' confirmation:' + confirmation + ' password: ' +
                        password);
            }
            response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.BAD_REQUEST, res);
        } else {
            var verificationBean = null;
            try {
                verificationBean = recoveryModule.updatePassword(username, confirmation, password);
            } catch (e) {
                var errorMsg = 'Failed to update password';
                log.error(errorMsg, e);
                res.error = true;
                res.msg = errorMsg;
                response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.INTERNAL_SERVER_ERROR,
                        res);
            }
            if (verificationBean) {
                if (verificationBean.isVerified()) {
                    res.error = false;
                    res.msg = 'Password successfully updated';
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, res);
                } else {
                    res.error = true;
                    var error = verificationBean.getError();
                    res.msg = errorProcessor.getErrorMessage(error);
                    if (log.isDebugEnabled()) {
                        log.debug(res.msg + ' -for user:' + username);
                    }
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, res);
                }
            }
        }
    };

    if(action == 'updatePassword'){
        updatePassword(username, confirmationCode, password);
    }else {
        response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_FOUND, null);
    }

}());

%>