<%
/*
 *  Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

/**
 *  Contains endpoints related to challenge question
 */

var action = request.getParameter('action'),
    username = session.get('username'),
    confirmationKey = session.get('confirmation'),
    questionId = session.get('question-id'),
    answer = request.getParameter('answer'),
    responseProcessor = require('utils').response,
    constants = require('rxt').constants,
    log = new Log(),
    res = {};

var errorProcessor = require('/modules/error.js');

(function () {
    var recoveryModule = require('account-management').recovery;

    /**
     * Verify the answer to the challenge
     *
     * @param username user name
     * @param confirmation confirmation code from previous step
     * @param questionId challenge question id
     * @param answer user answer
     * @return success status
     */
    var verifyChallenge = function (username, confirmation, questionId, answer) {
        var verificationBean = null;
        try {
            verificationBean = recoveryModule.verifyChallenge(username, confirmation, questionId, answer);
        } catch (e) {
            var errorMsg = 'Failed to verify challenge';
            log.error(errorMsg, e);
            res.error = true;
            res.msg = errorMsg;
            response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.INTERNAL_SERVER_ERROR,
                    res);
        }
        if (verificationBean) {
            if (verificationBean.isVerified()) {
                session.put('confirmation', verificationBean.getKey());
                res.error = false;
                res.msg = 'Challenge answer verified';
                response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, res);
            } else {
                res.error = true;
                var error = verificationBean.getError();
                res.msg = errorProcessor.getErrorMessage(error);
                if (log.isDebugEnabled()) {
                    log.debug(res.msg + ' -for user:' + username);
                }
                response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, res);
            }
        }
    };

    if (action == 'verifyChallenge') {
        verifyChallenge(username, confirmationKey, questionId, answer);
    } else {
        response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_FOUND, null);
    }

}());

%>

