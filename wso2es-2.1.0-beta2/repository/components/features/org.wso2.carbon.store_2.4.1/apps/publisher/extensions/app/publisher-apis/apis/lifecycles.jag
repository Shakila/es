<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 Description: Invoke routed api endpoints
 * ENDPOINTS:   /apis/lifecycles/
 /apis/lifecycles/{lifecycleName}
 /apis/lifecycles/{lifecycleName}/{currentState}
 */

require('/modules/publisher.js').exec(function (ctx) {
    var log = new Log('lifecycle-api');

    var utils = require('utils');
    var rxt = require('rxt');
    var lcCore = require('lifecycle').core;
    var lcApi = require('/modules/lifecycle/lifecycle-api.js').api;
    var server = require('store').server;
    var assetApi = require('/modules/asset-api.js').api;

    var ref = utils.request;
    var responseProcessor = utils.response;
    var constants = rxt.constants;

    var response = ctx.response;
    var req = ctx.request;
    var session = ctx.session;
    var tenantId = server.current(session).tenantId;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());

    var method = req.getMethod();
    var options = ref.getQueryOptions(req.getQueryString());
    response.contentType = 'application/json';
    var lifecycleName = '';

    switch (method) {
        case 'GET':
            if (uriMatcher.match(constants.GET_LIFECYCLES_URL)) {
                // to return available lifecycle list
                try {
                    var lcList = lcApi.getLifecycles(options, req, response, session);
                    //call lifecycle module to get list
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, lcList);// return list
                } catch (e) {
                    log.error(e);
                    response = responseProcessor.buildErrorResponse(response, e.code, e.message);//return error response
                }

            } else if (uriMatcher.match(constants.GET_LIFECYCLE_DEFINITION_BY_NAME_URL)) {
                // to return lifecycle definition by name
                try {
                    options.name = uriMatcher.elements().lifecycleName;// required lifecycle's name
                    var lcDefinition = lcApi.getLifecycle(options, req, response, session);
                    //call lifecycle module to get definition
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, lcDefinition);//send response
                } catch (e) {
                    log.error(e);
                    response = responseProcessor.buildErrorResponse(response, e.code, e.messagee);//send error response
                }

            } else if (uriMatcher.match(constants.GET_LIFECYCLE_STATE_URL)) {
                //to return details on lifecycle state of a lifecycle definition
                options.name = uriMatcher.elements().lifecycleName;//set lifecycle name
                var currentState = uriMatcher.elements().currentState;//set required state name
                try {
                    var lc = lcApi.getLifecycle(options, req, response, session);
                    //call lifecycle module to get state details
                    var state = lc.state(currentState);
                    response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, state);
                } catch (e) {
                    log.error(e);
                    response = responseProcessor.buildErrorResponse(response, e.code, e.message);
                }

            } else {//unimplemented http GET endpoint
                response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this GET endpoint!');
            }
            break;

        default://unimplemented http request method
            response = responseProcessor.buildErrorResponse(response,  constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this endpoint for ' + method)
    }
}, request, response, session);
%>