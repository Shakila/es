<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
require('/modules/store.js').exec(function(ctx) {
    var log = new Log();
    var app = require('rxt').app;
    var id = request.getParameter('asset');
    var destination = request.getParameter('destination');
    var asset = require('rxt').asset;
    var type = request.getParameter('type');
    var redirect = app.getContext() + '/pages/top-assets'; //Assume a detination has not been provided
    var method = request.getMethod();
    var SUBSCRIBE_URL = '/{context}/apis/subscriptions';
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match(SUBSCRIBE_URL);
    var subApi = require('/modules/subscriptions-api.js').api;
    var responseProcessor = require('utils').response;
    var handleSubscribe = function(session,id, type, destination, redirect, response) {
        //Determine where the request should be routed
        if (destination) {
            redirect = destination;
        }
        var success = subApi.subscribe(session, {
            id: id,
            type: type
        });
        if (success) {
            response = responseProcessor.buildSuccessResponse(response, 200, "success");
        } else {
            response.sendError(500);
        }
        return success;
    };
    var handleUnSubscribe = function(session,id,type, response) {
        if(log.isDebugEnabled()) {
            log.debug('Attempting to unsubscribe');
        }
        //Determine where the request should be routed
        var success = subApi.unsubscribe(session, {
            id: id,
            type: type
        });
        if (success) {
            response = responseProcessor.buildSuccessResponse(response, 200, "success");
        } else {
            response.sendError(500);
        }
        return success;
    };
    if(log.isDebugEnabled()) {
        log.debug('type: '+type+' asset: '+id);
    }
    if (!type) {
        log.warn('Unable to subscribe to the asset as the type of the asset cannot be determined.');
        ctx.response.sendError(400,'Unable to subscribe to the asset as the type of the asset cannot be determined.');
    } else if(!id) {
        log.warn('Please provide an asset id as the asset query parameter to perform subscriptions operations.');
        ctx.response.sendError(400,'Please provide an asset id as the asset query parameter to perform subscriptions operations.');
    } else {
        switch (method) {
            case 'POST':
                handleSubscribe(ctx.session,id, type, destination, redirect, ctx.response);
                break;
            case 'DELETE':
                handleUnSubscribe(ctx.session, id, type, ctx.response);
                break;
            default:
                ctx.request.sendError(404);
                break;
        }
    }
}, request, response, session); %>